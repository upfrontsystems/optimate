"""
Models file contains resources used in the project
"""

import uuid
from zope.sqlalchemy import ZopeTransactionExtension
from sqlalchemy.ext.declarative import declarative_base

from sqlalchemy import (
    Column,
    Index,
    Integer,
    Text,
    ForeignKey,
    )

from sqlalchemy.orm import (
    scoped_session,
    sessionmaker,
    relationship,
    backref,
    )

# Build the session and base used for the project
DBSession = scoped_session(sessionmaker(extension=ZopeTransactionExtension('changed')))
# DBSession.execute('pragma foreign_keys=on')
Base = declarative_base()

class Node(Base):
    """
    The Node class is an extrapolation of the objects used in this hierarchy.
    It has ID and ParentID attributes, the ParentID refers back to the ID
    of it's parent node.
    The ID of the node is generated by default using UUID.
    It also has a Children-Parent relationship attribute.
    """

    __tablename__ = 'Node'
    ID = Column(Integer, primary_key=True)
    ParentID = Column(Integer, ForeignKey('Node.ID', ondelete='CASCADE'))
    type = Column(Text(50))

    Children = relationship('Node',
                        cascade="all",
                        backref=backref("Parent", remote_side='Node.ID'),
                    )

    __mapper_args__ = {
        'polymorphic_identity':'Node',
        'polymorphic_on':type
        }

    def __repr__(self):
        return "<Node(ID='%s', ParentID='%s')>" % (
                self.ID, self.ParentID)

class Project(Node):
    """
    A table representing a Project in Optimate, it has an ID, Name, Description
    and ParentID that is the ID of its parent.
    It inherits from Node, and it's ID is linked to Node.ID
    It has copy and paste functions.
    """

    __tablename__ = 'Project'
    ID = Column(Integer, ForeignKey('Node.ID', ondelete='CASCADE'), primary_key=True)
    Name = Column(Text)
    Description = Column(Text)
    Total = Column(Integer)
    Ordered = Column(Integer)
    Claimed = Column(Integer)

    __mapper_args__ = {
        'polymorphic_identity':'Project',
    }

    def copy(self, parentid):
        """
        copy returns an exact duplicate of this object,
        but with the ParentID specified.
        """

        return Project(Name=self.Name,
                        Description=self.Description,
                        ParentID=parentid,
                        Total=self.Total,
                        Ordered=self.Ordered,
                        Claimed=self.Claimed)

    def paste(self, source, sourcechildren):
        """
        paste appends a source object to the children of this node,
        and then recursively does the same with each child of the source object.
        """

        self.Children.append(source)

        for child in sourcechildren:
            source.paste(child.copy(source.ID), child.Children)

    def recalculateTotal(self):
        total = 0
        if self.Total == None:
            self.recalculateAll()
        for item in self.Children:
            total+=item.Total

        self.Total = total
        return total

    def recalculateAll(self):
        total = 0
        for item in self.Children:
            total+=item.recalculateAll()

        self.Total = total
        return total

    def __repr__(self):
        return "<Node(Name='%s', ID='%s', ParentID='%s')>" % (
                            self.Name, self.ID, self.ParentID)

class BudgetGroup(Node):
    """
    A table representing a BudgetGroup in Optimate, it has an ID, Name,
    Description and ParentID that is the ID of its parent.
    It inherits from Node, and it's ID is linked to Node.ID
    It has copy and paste functions.
    """

    __tablename__ = 'BudgetGroup'
    ID = Column(Integer, ForeignKey('Node.ID', ondelete='CASCADE'), primary_key=True)
    Name = Column(Text)
    Description = Column(Text)
    Total = Column(Integer)
    Ordered = Column(Integer)
    Claimed = Column(Integer)

    __mapper_args__ = {
        'polymorphic_identity':'BudgetGroup',
    }

    def copy(self, parentid):
        """
        copy returns an exact duplicate of this object,
        but with the ParentID specified.
        """
        return BudgetGroup(Name=self.Name,
                            Description=self.Description,
                            ParentID=parentid,
                            Total=self.Total,
                            Ordered=self.Ordered,
                            Claimed=self.Claimed
                            )

    def paste(self, source, sourcechildren):
        """
        paste appends a source object to the children of this node,
        and then recursively does the same with each child of the source object.
        """

        self.Children.append(source)

        for child in sourcechildren:
            source.paste(child.copy(source.ID), child.Children)

    def recalculateTotal(self):
        total = 0
        if self.Total == None:
            self.recalculateAll()
        for item in self.Children:
            total+=item.Total

    def recalculateAll(self):
        total = 0
        for item in self.Children:
            total+=item.recalculateAll()

        self.Total = total
        return total

    def __repr__(self):
        return "<Node(Name='%s', ID='%s', ParentID='%s')>" % (
                         self.Name, self.ID, self.ParentID)


class BudgetItem(Node):
    """
    A table representing a BudgetItem in Optimate, it has an ID, Name,
    Description, Quantity, Rate and ParentID that is the ID of its parent.
    """

    __tablename__ = 'BudgetItem'
    ID = Column(Integer, ForeignKey('Node.ID', ondelete='CASCADE'), primary_key=True)
    Name = Column(Text)
    Description = Column(Text)
    # Unit=Column(Text)
    Quantity = Column(Integer)
    Rate = Column(Integer)
    Total = Column(Integer)
    Ordered = Column(Integer)
    Claimed = Column(Integer)

    __mapper_args__ = {
        'polymorphic_identity':'BudgetItem',
    }

    def copy(self, parentid):
        """
        copy returns an exact duplicate of this object,
        but with the ParentID specified.
        """
        return BudgetItem(Name=self.Name,
                            Description=self.Description,
                            # Unit=self.Unit,
                            Quantity=self.Quantity,
                            Rate=self.Rate,
                            ParentID=parentid,
                            Total=self.Total,
                            Ordered=self.Ordered,
                            Claimed=self.Claimed)

    def paste(self, source, sourcechildren):
        """
        paste appends a source object to the children of this node,
        and then recursively does the same with each child of the source object.
        """
        self.Children.append(source)

        for child in sourcechildren:
            source.paste(child.copy(source.ID), child.Children)

    def recalculateTotal(self):
        total = 0
        if self.Total == None:
            print "\n\nrecaculating\n\n"
            self.recalculateAll()
        for item in self.Children:
            print "iterating"
            print item.Total
            total+=item.Total

        # if the rate of this BudgetItem is 0, then it is assumed it's rate is
        # baseb on it's components
        if self.Rate == 0 or self.Rate == None:
            self.Rate = 0
            for item in self.Children:
                self.Rate+=item.Total
        print "\n\nThis is the rate of this budgetitem: "+ str(self.Rate) + "\n\n"
        if self.Quantity == None:
            self.Quantity = 0
        total = total + self.Quantity*self.Rate
        self.Total = total
        return total

    def recalculateAll(self):
        total = 0
        for item in self.Children:
            total+=item.recalculateAll()

        # if the rate of this BudgetItem is 0, then it is assumed it's rate is
        # based on it's components
        if self.Rate == 0 or self.Rate == None:
            self.Rate = 0
            qry = DBSession.query(Component).filter_by(ParentID=self.ID).all()
            for item in qry:
                self.Rate+=item.Total
            print "\n\nthis is this budgetitems new rate: " + str(self.Rate) + "\n\n"
        if self.Quantity == None:
            self.Quantity = 0
        total = total + self.Quantity*self.Rate
        self.Total = total
        return total

    def __repr__(self):
        return "<Node(Name='%s', ID='%s', ParentID='%s')>" % (
                            self.Name, self.ID, self.ParentID)

class Component(Node):

    __tablename__ = 'Component'
    ID = Column(Integer, ForeignKey('Node.ID', ondelete='CASCADE'), primary_key=True)
    Name = Column(Text)
    Description = Column(Text)
    Type = Column(Integer, ForeignKey('ComponentType.ID'))
    # Unit = Column(Text)
    Quantity = Column(Integer)
    Rate = Column(Integer)
    Total = Column(Integer)
    Ordered = Column(Integer)
    Claimed = Column(Integer)

    __mapper_args__ = {
        'polymorphic_identity':'Component',
    }

    def copy(self, parentid):
        """
        copy returns an exact duplicate of this object,
        but with the ParentID specified.
        """
        return Component(Name=self.Name,
                            Type=self.Type,
                            # Unit=self.Unit,
                            Quantity=self.Quantity,
                            Rate=self.Rate,
                            Total=self.Total,
                            Ordered=self.Ordered,
                            Claimed=self.Claimed,
                            ParentID=parentid)

    def paste(self, source, sourcechildren):
        """
        paste appends a source object to the children of this node,
        and then recursively does the same with each child of the source object.
        """
        self.Children.append(source)

        for child in sourcechildren:
            source.paste(child.copy(source.ID), child.Children)

    def recalculateTotal(self):
        total = 0
        if self.Total == None:
            self.recalculateAll()
        for item in self.Children:
            total+=item.Total

        if self.Rate == None:
            self.Rate = 0

        if self.Quantity == None:
            self.Quantity = 0

        total = total + self.Quantity*self.Rate
        self.Total = total
        return total

    def recalculateAll(self):
        total = 0
        for item in self.Children:
            total+=item.recalculateAll()

        if self.Rate == None:
            self.Rate = 0

        if self.Quantity == None:
            self.Quantity = 0

        total = total + self.Quantity*self.Rate

        self.Total = total
        print "\n\nthis components new total: " +str(self.Total)+"\n\n"
        return total

    def __repr__(self):
        return "<Node(Name='%s', ID='%s', ParentID='%s')>" % (
                            self.Name, self.ID, self.ParentID)


class ComponentType(Base):

    __tablename__ = 'ComponentType'
    ID = Column(Integer, primary_key=True)
    Name = Column(Text)

    Components = relationship('Component',
                            backref=backref('TypeOf'))

    __mapper_args__ = {
        'polymorphic_identity':'ComponentType',
    }

    def copy(self, parentid):
        """
        copy returns an exact duplicate of this object,
        but with the ParentID specified.
        """
        return Component(Name=self.Name,
                            ParentID=parentid)

    def paste(self, source, sourcechildren):
        """
        paste appends a source object to the children of this node,
        and then recursively does the same with each child of the source object.
        """
        self.Children.append(source)

        for child in sourcechildren:
            source.paste(child.copy(source.ID), child.Children)


    def __repr__(self):
        return "<Node(Name='%s', ID='%s', ParentID='%s')>" % (
                            self.Name, self.ID, self.ParentID)
